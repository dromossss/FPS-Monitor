#pragma once
#include <unordered_map>
#include <functional>
#include <string>
#include <typeindex>
#include <type_traits>
#include <sstream>
#include <format>
#include "../GeneratedReflection.h"
#include "../GeneratedReflectionHelpers.h"

// target includes
{{~ for include in includes ~}}
#include "../../../../{{~ include ~}}"
{{~ end ~}}

namespace pmon::util::ref::gen
{
	using namespace std::literals;

	void RegisterDumpers_(std::unordered_map<std::type_index, std::function<std::string(const void*)>>& dumpers)
	{
		// structs
{{~ for struct in structs ~}}
		dumpers[typeid({{ struct.Name }})] = [](const void* pStruct) {
			const auto& s = *static_cast<const {{ struct.Name }}*>(pStruct);
			std::ostringstream oss;
			oss << std::boolalpha << "{{ struct.Type }} {{ struct.Name }} {"
{{~ for member in struct.Members ~}}
				<< " .{{ member.Name }} = " << {{ member.DumpExpression }}
{{~ end ~}}
				<< " }";
			return oss.str();
		};
{{~ end ~}}

		// enums
{{~ for enum in enums ~}}
		dumpers[typeid({{ enum.Name }})] = [](const void* pEnum) {
			const auto& e = *static_cast<const {{ enum.Name }}*>(pEnum);
			switch (e) {
{{~ for value in enum.Values ~}}
			case {{ enum.Name }}::{{ value.Name }}: return "{{ value.Name }}"s;
{{~ end ~}}
			default: return "{ unknown }"s;
			}
		};
{{~ end ~}}
	}
}
