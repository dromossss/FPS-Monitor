
// This file is auto generated by Scripts/generate_code.py

#include "../Context.h"
#include "../WrapUtils.h"

#include "../Custom/Extensions.h"
#include "API_DXGI.h"

namespace GfxLayer
{
    /* GENRATED FROM THE DXGI HEADER */


    HRESULT IDXGIObject_Wrapper::SetPrivateData(REFGUID Name, UINT DataSize, const void* pData)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOBJECT_SETPRIVATEDATA>::Run(result, this, Name, DataSize, pData);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIObject>()->SetPrivateData(
                Name,
                DataSize,
                pData
            );

            PostCall<API_IDXGIOBJECT_SETPRIVATEDATA>::Run(result, this, Name, DataSize, pData);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIObject>()->SetPrivateData(Name, DataSize, pData);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIObject_Wrapper::SetPrivateDataInterface(REFGUID Name, const IUnknown* pUnknown)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOBJECT_SETPRIVATEDATAINTERFACE>::Run(result, this, Name, pUnknown);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIObject>()->SetPrivateDataInterface(
                Name,
                UnwrapObject<IUnknown>(pUnknown)
            );

            PostCall<API_IDXGIOBJECT_SETPRIVATEDATAINTERFACE>::Run(result, this, Name, pUnknown);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIObject>()->SetPrivateDataInterface(Name, pUnknown);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIObject_Wrapper::GetPrivateData(REFGUID Name, UINT* pDataSize, void* pData)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOBJECT_GETPRIVATEDATA>::Run(result, this, Name, pDataSize, pData);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIObject>()->GetPrivateData(
                Name,
                pDataSize,
                pData
            );

            PostCall<API_IDXGIOBJECT_GETPRIVATEDATA>::Run(result, this, Name, pDataSize, pData);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIObject>()->GetPrivateData(Name, pDataSize, pData);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIObject_Wrapper::GetParent(REFIID riid, void** ppParent)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOBJECT_GETPARENT>::Run(result, this, riid, ppParent);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIObject>()->GetParent(
                riid,
                ppParent
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppParent);
            }

            PostCall<API_IDXGIOBJECT_GETPARENT>::Run(result, this, riid, ppParent);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIObject>()->GetParent(riid, ppParent);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDeviceSubObject_Wrapper::GetDevice(REFIID riid, void** ppDevice)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICESUBOBJECT_GETDEVICE>::Run(result, this, riid, ppDevice);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDeviceSubObject>()->GetDevice(
                riid,
                ppDevice
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppDevice);
            }

            PostCall<API_IDXGIDEVICESUBOBJECT_GETDEVICE>::Run(result, this, riid, ppDevice);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDeviceSubObject>()->GetDevice(riid, ppDevice);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIResource_Wrapper::GetSharedHandle(HANDLE* pSharedHandle)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIRESOURCE_GETSHAREDHANDLE>::Run(result, this, pSharedHandle);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIResource>()->GetSharedHandle(
                pSharedHandle
            );

            PostCall<API_IDXGIRESOURCE_GETSHAREDHANDLE>::Run(result, this, pSharedHandle);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIResource>()->GetSharedHandle(pSharedHandle);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIResource_Wrapper::GetUsage(DXGI_USAGE* pUsage)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIRESOURCE_GETUSAGE>::Run(result, this, pUsage);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIResource>()->GetUsage(
                pUsage
            );

            PostCall<API_IDXGIRESOURCE_GETUSAGE>::Run(result, this, pUsage);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIResource>()->GetUsage(pUsage);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIResource_Wrapper::SetEvictionPriority(UINT EvictionPriority)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIRESOURCE_SETEVICTIONPRIORITY>::Run(result, this, EvictionPriority);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIResource>()->SetEvictionPriority(
                EvictionPriority
            );

            PostCall<API_IDXGIRESOURCE_SETEVICTIONPRIORITY>::Run(result, this, EvictionPriority);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIResource>()->SetEvictionPriority(EvictionPriority);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIResource_Wrapper::GetEvictionPriority(UINT* pEvictionPriority)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIRESOURCE_GETEVICTIONPRIORITY>::Run(result, this, pEvictionPriority);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIResource>()->GetEvictionPriority(
                pEvictionPriority
            );

            PostCall<API_IDXGIRESOURCE_GETEVICTIONPRIORITY>::Run(result, this, pEvictionPriority);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIResource>()->GetEvictionPriority(pEvictionPriority);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIKeyedMutex_Wrapper::AcquireSync(UINT64 Key, DWORD dwMilliseconds)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIKEYEDMUTEX_ACQUIRESYNC>::Run(result, this, Key, dwMilliseconds);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIKeyedMutex>()->AcquireSync(
                Key,
                dwMilliseconds
            );

            PostCall<API_IDXGIKEYEDMUTEX_ACQUIRESYNC>::Run(result, this, Key, dwMilliseconds);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIKeyedMutex>()->AcquireSync(Key, dwMilliseconds);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIKeyedMutex_Wrapper::ReleaseSync(UINT64 Key)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIKEYEDMUTEX_RELEASESYNC>::Run(result, this, Key);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIKeyedMutex>()->ReleaseSync(
                Key
            );

            PostCall<API_IDXGIKEYEDMUTEX_RELEASESYNC>::Run(result, this, Key);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIKeyedMutex>()->ReleaseSync(Key);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISurface_Wrapper::GetDesc(DXGI_SURFACE_DESC* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISURFACE_GETDESC>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISurface>()->GetDesc(
                pDesc
            );

            PostCall<API_IDXGISURFACE_GETDESC>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISurface>()->GetDesc(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISurface_Wrapper::Map(DXGI_MAPPED_RECT* pLockedRect, UINT MapFlags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISURFACE_MAP>::Run(result, this, pLockedRect, MapFlags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISurface>()->Map(
                pLockedRect,
                MapFlags
            );

            PostCall<API_IDXGISURFACE_MAP>::Run(result, this, pLockedRect, MapFlags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISurface>()->Map(pLockedRect, MapFlags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISurface_Wrapper::Unmap()
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISURFACE_UNMAP>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISurface>()->Unmap();

            PostCall<API_IDXGISURFACE_UNMAP>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISurface>()->Unmap();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISurface1_Wrapper::GetDC(BOOL Discard, HDC* phdc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISURFACE1_GETDC>::Run(result, this, Discard, phdc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISurface1>()->GetDC(
                Discard,
                phdc
            );

            PostCall<API_IDXGISURFACE1_GETDC>::Run(result, this, Discard, phdc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISurface1>()->GetDC(Discard, phdc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISurface1_Wrapper::ReleaseDC(RECT* pDirtyRect)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISURFACE1_RELEASEDC>::Run(result, this, pDirtyRect);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISurface1>()->ReleaseDC(
                pDirtyRect
            );

            PostCall<API_IDXGISURFACE1_RELEASEDC>::Run(result, this, pDirtyRect);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISurface1>()->ReleaseDC(pDirtyRect);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter_Wrapper::EnumOutputs(UINT Output, IDXGIOutput** ppOutput)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER_ENUMOUTPUTS>::Run(result, this, Output, ppOutput);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter>()->EnumOutputs(
                Output,
                ppOutput
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIOutput, reinterpret_cast<void**>(ppOutput));
            }

            PostCall<API_IDXGIADAPTER_ENUMOUTPUTS>::Run(result, this, Output, ppOutput);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter>()->EnumOutputs(Output, ppOutput);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter_Wrapper::GetDesc(DXGI_ADAPTER_DESC* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER_GETDESC>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter>()->GetDesc(
                pDesc
            );

            PostCall<API_IDXGIADAPTER_GETDESC>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter>()->GetDesc(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter_Wrapper::CheckInterfaceSupport(REFGUID InterfaceName, LARGE_INTEGER* pUMDVersion)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER_CHECKINTERFACESUPPORT>::Run(result, this, InterfaceName, pUMDVersion);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter>()->CheckInterfaceSupport(
                InterfaceName,
                pUMDVersion
            );

            PostCall<API_IDXGIADAPTER_CHECKINTERFACESUPPORT>::Run(result, this, InterfaceName, pUMDVersion);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter>()->CheckInterfaceSupport(InterfaceName, pUMDVersion);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::GetDesc(DXGI_OUTPUT_DESC* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_GETDESC>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->GetDesc(
                pDesc
            );

            PostCall<API_IDXGIOUTPUT_GETDESC>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->GetDesc(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::GetDisplayModeList(DXGI_FORMAT EnumFormat, UINT Flags, UINT* pNumModes, DXGI_MODE_DESC* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_GETDISPLAYMODELIST>::Run(result, this, EnumFormat, Flags, pNumModes, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->GetDisplayModeList(
                EnumFormat,
                Flags,
                pNumModes,
                pDesc
            );

            PostCall<API_IDXGIOUTPUT_GETDISPLAYMODELIST>::Run(result, this, EnumFormat, Flags, pNumModes, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->GetDisplayModeList(EnumFormat, Flags, pNumModes, pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::FindClosestMatchingMode(const DXGI_MODE_DESC* pModeToMatch, DXGI_MODE_DESC* pClosestMatch, IUnknown* pConcernedDevice)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_FINDCLOSESTMATCHINGMODE>::Run(result, this, pModeToMatch, pClosestMatch, pConcernedDevice);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->FindClosestMatchingMode(
                pModeToMatch,
                pClosestMatch,
                UnwrapObject<IUnknown>(pConcernedDevice)
            );

            PostCall<API_IDXGIOUTPUT_FINDCLOSESTMATCHINGMODE>::Run(result, this, pModeToMatch, pClosestMatch, pConcernedDevice);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->FindClosestMatchingMode(pModeToMatch, pClosestMatch, pConcernedDevice);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::WaitForVBlank()
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_WAITFORVBLANK>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->WaitForVBlank();

            PostCall<API_IDXGIOUTPUT_WAITFORVBLANK>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->WaitForVBlank();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::TakeOwnership(IUnknown* pDevice, BOOL Exclusive)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_TAKEOWNERSHIP>::Run(result, this, pDevice, Exclusive);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->TakeOwnership(
                UnwrapObject<IUnknown>(pDevice),
                Exclusive
            );

            PostCall<API_IDXGIOUTPUT_TAKEOWNERSHIP>::Run(result, this, pDevice, Exclusive);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->TakeOwnership(pDevice, Exclusive);
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIOutput_Wrapper::ReleaseOwnership()
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_RELEASEOWNERSHIP>::Run(this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIOutput>()->ReleaseOwnership();
        
            PostCall<API_IDXGIOUTPUT_RELEASEOWNERSHIP>::Run(this);
        }
        else
        {
            GetWrappedObjectAs<IDXGIOutput>()->ReleaseOwnership();
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGIOutput_Wrapper::GetGammaControlCapabilities(DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_GETGAMMACONTROLCAPABILITIES>::Run(result, this, pGammaCaps);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->GetGammaControlCapabilities(
                pGammaCaps
            );

            PostCall<API_IDXGIOUTPUT_GETGAMMACONTROLCAPABILITIES>::Run(result, this, pGammaCaps);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->GetGammaControlCapabilities(pGammaCaps);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::SetGammaControl(const DXGI_GAMMA_CONTROL* pArray)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_SETGAMMACONTROL>::Run(result, this, pArray);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->SetGammaControl(
                pArray
            );

            PostCall<API_IDXGIOUTPUT_SETGAMMACONTROL>::Run(result, this, pArray);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->SetGammaControl(pArray);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::GetGammaControl(DXGI_GAMMA_CONTROL* pArray)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_GETGAMMACONTROL>::Run(result, this, pArray);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->GetGammaControl(
                pArray
            );

            PostCall<API_IDXGIOUTPUT_GETGAMMACONTROL>::Run(result, this, pArray);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->GetGammaControl(pArray);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::SetDisplaySurface(IDXGISurface* pScanoutSurface)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_SETDISPLAYSURFACE>::Run(result, this, pScanoutSurface);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->SetDisplaySurface(
                UnwrapObject<IDXGISurface>(pScanoutSurface)
            );

            PostCall<API_IDXGIOUTPUT_SETDISPLAYSURFACE>::Run(result, this, pScanoutSurface);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->SetDisplaySurface(pScanoutSurface);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::GetDisplaySurfaceData(IDXGISurface* pDestination)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_GETDISPLAYSURFACEDATA>::Run(result, this, pDestination);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->GetDisplaySurfaceData(
                UnwrapObject<IDXGISurface>(pDestination)
            );

            PostCall<API_IDXGIOUTPUT_GETDISPLAYSURFACEDATA>::Run(result, this, pDestination);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->GetDisplaySurfaceData(pDestination);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput_Wrapper::GetFrameStatistics(DXGI_FRAME_STATISTICS* pStats)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT_GETFRAMESTATISTICS>::Run(result, this, pStats);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput>()->GetFrameStatistics(
                pStats
            );

            PostCall<API_IDXGIOUTPUT_GETFRAMESTATISTICS>::Run(result, this, pStats);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput>()->GetFrameStatistics(pStats);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::Present(UINT SyncInterval, UINT Flags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_PRESENT>::Run(result, this, SyncInterval, Flags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->Present(
                SyncInterval,
                Flags
            );

            PostCall<API_IDXGISWAPCHAIN_PRESENT>::Run(result, this, SyncInterval, Flags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->Present(SyncInterval, Flags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::GetBuffer(UINT Buffer, REFIID riid, void** ppSurface)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_GETBUFFER>::Run(result, this, Buffer, riid, ppSurface);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetBuffer(
                Buffer,
                riid,
                ppSurface
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppSurface);
            }

            PostCall<API_IDXGISWAPCHAIN_GETBUFFER>::Run(result, this, Buffer, riid, ppSurface);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetBuffer(Buffer, riid, ppSurface);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::SetFullscreenState(BOOL Fullscreen, IDXGIOutput* pTarget)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_SETFULLSCREENSTATE>::Run(result, this, Fullscreen, pTarget);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->SetFullscreenState(
                Fullscreen,
                UnwrapObject<IDXGIOutput>(pTarget)
            );

            PostCall<API_IDXGISWAPCHAIN_SETFULLSCREENSTATE>::Run(result, this, Fullscreen, pTarget);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->SetFullscreenState(Fullscreen, pTarget);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::GetFullscreenState(BOOL* pFullscreen, IDXGIOutput** ppTarget)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_GETFULLSCREENSTATE>::Run(result, this, pFullscreen, ppTarget);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetFullscreenState(
                pFullscreen,
                ppTarget
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIOutput, reinterpret_cast<void**>(ppTarget));
            }

            PostCall<API_IDXGISWAPCHAIN_GETFULLSCREENSTATE>::Run(result, this, pFullscreen, ppTarget);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetFullscreenState(pFullscreen, ppTarget);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::GetDesc(DXGI_SWAP_CHAIN_DESC* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_GETDESC>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetDesc(
                pDesc
            );

            PostCall<API_IDXGISWAPCHAIN_GETDESC>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetDesc(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::ResizeBuffers(UINT BufferCount, UINT Width, UINT Height, DXGI_FORMAT NewFormat, UINT SwapChainFlags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_RESIZEBUFFERS>::Run(result, this, BufferCount, Width, Height, NewFormat, SwapChainFlags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->ResizeBuffers(
                BufferCount,
                Width,
                Height,
                NewFormat,
                SwapChainFlags
            );

            PostCall<API_IDXGISWAPCHAIN_RESIZEBUFFERS>::Run(result, this, BufferCount, Width, Height, NewFormat, SwapChainFlags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->ResizeBuffers(BufferCount, Width, Height, NewFormat, SwapChainFlags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::ResizeTarget(const DXGI_MODE_DESC* pNewTargetParameters)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_RESIZETARGET>::Run(result, this, pNewTargetParameters);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->ResizeTarget(
                pNewTargetParameters
            );

            PostCall<API_IDXGISWAPCHAIN_RESIZETARGET>::Run(result, this, pNewTargetParameters);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->ResizeTarget(pNewTargetParameters);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::GetContainingOutput(IDXGIOutput** ppOutput)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_GETCONTAININGOUTPUT>::Run(result, this, ppOutput);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetContainingOutput(
                ppOutput
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIOutput, reinterpret_cast<void**>(ppOutput));
            }

            PostCall<API_IDXGISWAPCHAIN_GETCONTAININGOUTPUT>::Run(result, this, ppOutput);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetContainingOutput(ppOutput);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::GetFrameStatistics(DXGI_FRAME_STATISTICS* pStats)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_GETFRAMESTATISTICS>::Run(result, this, pStats);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetFrameStatistics(
                pStats
            );

            PostCall<API_IDXGISWAPCHAIN_GETFRAMESTATISTICS>::Run(result, this, pStats);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetFrameStatistics(pStats);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain_Wrapper::GetLastPresentCount(UINT* pLastPresentCount)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN_GETLASTPRESENTCOUNT>::Run(result, this, pLastPresentCount);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetLastPresentCount(
                pLastPresentCount
            );

            PostCall<API_IDXGISWAPCHAIN_GETLASTPRESENTCOUNT>::Run(result, this, pLastPresentCount);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain>()->GetLastPresentCount(pLastPresentCount);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory_Wrapper::EnumAdapters(UINT Adapter, IDXGIAdapter** ppAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY_ENUMADAPTERS>::Run(result, this, Adapter, ppAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory>()->EnumAdapters(
                Adapter,
                ppAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIAdapter, reinterpret_cast<void**>(ppAdapter));
            }

            PostCall<API_IDXGIFACTORY_ENUMADAPTERS>::Run(result, this, Adapter, ppAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory>()->EnumAdapters(Adapter, ppAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory_Wrapper::MakeWindowAssociation(HWND WindowHandle, UINT Flags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY_MAKEWINDOWASSOCIATION>::Run(result, this, WindowHandle, Flags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory>()->MakeWindowAssociation(
                WindowHandle,
                Flags
            );

            PostCall<API_IDXGIFACTORY_MAKEWINDOWASSOCIATION>::Run(result, this, WindowHandle, Flags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory>()->MakeWindowAssociation(WindowHandle, Flags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory_Wrapper::GetWindowAssociation(HWND* pWindowHandle)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY_GETWINDOWASSOCIATION>::Run(result, this, pWindowHandle);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory>()->GetWindowAssociation(
                pWindowHandle
            );

            PostCall<API_IDXGIFACTORY_GETWINDOWASSOCIATION>::Run(result, this, pWindowHandle);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory>()->GetWindowAssociation(pWindowHandle);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory_Wrapper::CreateSwapChain(IUnknown* pDevice, DXGI_SWAP_CHAIN_DESC* pDesc, IDXGISwapChain** ppSwapChain)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY_CREATESWAPCHAIN>::Run(result, this, pDevice, pDesc, ppSwapChain);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory>()->CreateSwapChain(
                UnwrapObject<IUnknown>(pDevice),
                pDesc,
                ppSwapChain
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGISwapChain, reinterpret_cast<void**>(ppSwapChain));
            }

            PostCall<API_IDXGIFACTORY_CREATESWAPCHAIN>::Run(result, this, pDevice, pDesc, ppSwapChain);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory>()->CreateSwapChain(pDevice, pDesc, ppSwapChain);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory_Wrapper::CreateSoftwareAdapter(HMODULE Module, IDXGIAdapter** ppAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY_CREATESOFTWAREADAPTER>::Run(result, this, Module, ppAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory>()->CreateSoftwareAdapter(
                Module,
                ppAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIAdapter, reinterpret_cast<void**>(ppAdapter));
            }

            PostCall<API_IDXGIFACTORY_CREATESOFTWAREADAPTER>::Run(result, this, Module, ppAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory>()->CreateSoftwareAdapter(Module, ppAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice_Wrapper::GetAdapter(IDXGIAdapter** pAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE_GETADAPTER>::Run(result, this, pAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice>()->GetAdapter(
                pAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIAdapter, reinterpret_cast<void**>(pAdapter));
            }

            PostCall<API_IDXGIDEVICE_GETADAPTER>::Run(result, this, pAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice>()->GetAdapter(pAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice_Wrapper::CreateSurface(const DXGI_SURFACE_DESC* pDesc, UINT NumSurfaces, DXGI_USAGE Usage, const DXGI_SHARED_RESOURCE* pSharedResource, IDXGISurface** ppSurface)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE_CREATESURFACE>::Run(result, this, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice>()->CreateSurface(
                pDesc,
                NumSurfaces,
                Usage,
                pSharedResource,
                ppSurface
            );
            if (SUCCEEDED(result))
            {
                WrapObjectArray(NumSurfaces, IID_IDXGISurface, reinterpret_cast<void**>(ppSurface));
            }

            PostCall<API_IDXGIDEVICE_CREATESURFACE>::Run(result, this, pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice>()->CreateSurface(pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice_Wrapper::QueryResourceResidency(IUnknown* const* ppResources, DXGI_RESIDENCY* pResidencyStatus, UINT NumResources)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE_QUERYRESOURCERESIDENCY>::Run(result, this, ppResources, pResidencyStatus, NumResources);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            auto& memoryPool = Context::GetInstance().GetMemoryPool();
            result = GetWrappedObjectAs<IDXGIDevice>()->QueryResourceResidency(
                UnwrapObjects<IUnknown>(ppResources, NumResources, memoryPool),
                pResidencyStatus,
                NumResources
            );

            PostCall<API_IDXGIDEVICE_QUERYRESOURCERESIDENCY>::Run(result, this, ppResources, pResidencyStatus, NumResources);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice>()->QueryResourceResidency(ppResources, pResidencyStatus, NumResources);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice_Wrapper::SetGPUThreadPriority(INT Priority)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE_SETGPUTHREADPRIORITY>::Run(result, this, Priority);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice>()->SetGPUThreadPriority(
                Priority
            );

            PostCall<API_IDXGIDEVICE_SETGPUTHREADPRIORITY>::Run(result, this, Priority);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice>()->SetGPUThreadPriority(Priority);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice_Wrapper::GetGPUThreadPriority(INT* pPriority)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE_GETGPUTHREADPRIORITY>::Run(result, this, pPriority);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice>()->GetGPUThreadPriority(
                pPriority
            );

            PostCall<API_IDXGIDEVICE_GETGPUTHREADPRIORITY>::Run(result, this, pPriority);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice>()->GetGPUThreadPriority(pPriority);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory1_Wrapper::EnumAdapters1(UINT Adapter, IDXGIAdapter1** ppAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY1_ENUMADAPTERS1>::Run(result, this, Adapter, ppAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory1>()->EnumAdapters1(
                Adapter,
                ppAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIAdapter1, reinterpret_cast<void**>(ppAdapter));
            }

            PostCall<API_IDXGIFACTORY1_ENUMADAPTERS1>::Run(result, this, Adapter, ppAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory1>()->EnumAdapters1(Adapter, ppAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    BOOL IDXGIFactory1_Wrapper::IsCurrent()
    {
        BOOL result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY1_ISCURRENT>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory1>()->IsCurrent();

            PostCall<API_IDXGIFACTORY1_ISCURRENT>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory1>()->IsCurrent();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter1_Wrapper::GetDesc1(DXGI_ADAPTER_DESC1* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER1_GETDESC1>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter1>()->GetDesc1(
                pDesc
            );

            PostCall<API_IDXGIADAPTER1_GETDESC1>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter1>()->GetDesc1(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice1_Wrapper::SetMaximumFrameLatency(UINT MaxLatency)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE1_SETMAXIMUMFRAMELATENCY>::Run(result, this, MaxLatency);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice1>()->SetMaximumFrameLatency(
                MaxLatency
            );

            PostCall<API_IDXGIDEVICE1_SETMAXIMUMFRAMELATENCY>::Run(result, this, MaxLatency);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice1>()->SetMaximumFrameLatency(MaxLatency);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice1_Wrapper::GetMaximumFrameLatency(UINT* pMaxLatency)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE1_GETMAXIMUMFRAMELATENCY>::Run(result, this, pMaxLatency);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice1>()->GetMaximumFrameLatency(
                pMaxLatency
            );

            PostCall<API_IDXGIDEVICE1_GETMAXIMUMFRAMELATENCY>::Run(result, this, pMaxLatency);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice1>()->GetMaximumFrameLatency(pMaxLatency);
        }
        ctx.DecrementCallScope();
        return result;
    }

    BOOL IDXGIDisplayControl_Wrapper::IsStereoEnabled()
    {
        BOOL result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDISPLAYCONTROL_ISSTEREOENABLED>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDisplayControl>()->IsStereoEnabled();

            PostCall<API_IDXGIDISPLAYCONTROL_ISSTEREOENABLED>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDisplayControl>()->IsStereoEnabled();
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIDisplayControl_Wrapper::SetStereoEnabled(BOOL enabled)
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDISPLAYCONTROL_SETSTEREOENABLED>::Run(this, enabled);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIDisplayControl>()->SetStereoEnabled(
                enabled
            );
        
            PostCall<API_IDXGIDISPLAYCONTROL_SETSTEREOENABLED>::Run(this, enabled);
        }
        else
        {
            GetWrappedObjectAs<IDXGIDisplayControl>()->SetStereoEnabled(enabled);
        }
        ctx.DecrementCallScope();
    }

    void IDXGIOutputDuplication_Wrapper::GetDesc(DXGI_OUTDUPL_DESC* pDesc)
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_GETDESC>::Run(this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIOutputDuplication>()->GetDesc(
                pDesc
            );
        
            PostCall<API_IDXGIOUTPUTDUPLICATION_GETDESC>::Run(this, pDesc);
        }
        else
        {
            GetWrappedObjectAs<IDXGIOutputDuplication>()->GetDesc(pDesc);
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGIOutputDuplication_Wrapper::AcquireNextFrame(UINT TimeoutInMilliseconds, DXGI_OUTDUPL_FRAME_INFO* pFrameInfo, IDXGIResource** ppDesktopResource)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_ACQUIRENEXTFRAME>::Run(result, this, TimeoutInMilliseconds, pFrameInfo, ppDesktopResource);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->AcquireNextFrame(
                TimeoutInMilliseconds,
                pFrameInfo,
                ppDesktopResource
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIResource, reinterpret_cast<void**>(ppDesktopResource));
            }

            PostCall<API_IDXGIOUTPUTDUPLICATION_ACQUIRENEXTFRAME>::Run(result, this, TimeoutInMilliseconds, pFrameInfo, ppDesktopResource);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->AcquireNextFrame(TimeoutInMilliseconds, pFrameInfo, ppDesktopResource);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutputDuplication_Wrapper::GetFrameDirtyRects(UINT DirtyRectsBufferSize, RECT* pDirtyRectsBuffer, UINT* pDirtyRectsBufferSizeRequired)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_GETFRAMEDIRTYRECTS>::Run(result, this, DirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->GetFrameDirtyRects(
                DirtyRectsBufferSize,
                pDirtyRectsBuffer,
                pDirtyRectsBufferSizeRequired
            );

            PostCall<API_IDXGIOUTPUTDUPLICATION_GETFRAMEDIRTYRECTS>::Run(result, this, DirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->GetFrameDirtyRects(DirtyRectsBufferSize, pDirtyRectsBuffer, pDirtyRectsBufferSizeRequired);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutputDuplication_Wrapper::GetFrameMoveRects(UINT MoveRectsBufferSize, DXGI_OUTDUPL_MOVE_RECT* pMoveRectBuffer, UINT* pMoveRectsBufferSizeRequired)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_GETFRAMEMOVERECTS>::Run(result, this, MoveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->GetFrameMoveRects(
                MoveRectsBufferSize,
                pMoveRectBuffer,
                pMoveRectsBufferSizeRequired
            );

            PostCall<API_IDXGIOUTPUTDUPLICATION_GETFRAMEMOVERECTS>::Run(result, this, MoveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->GetFrameMoveRects(MoveRectsBufferSize, pMoveRectBuffer, pMoveRectsBufferSizeRequired);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutputDuplication_Wrapper::GetFramePointerShape(UINT PointerShapeBufferSize, void* pPointerShapeBuffer, UINT* pPointerShapeBufferSizeRequired, DXGI_OUTDUPL_POINTER_SHAPE_INFO* pPointerShapeInfo)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_GETFRAMEPOINTERSHAPE>::Run(result, this, PointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->GetFramePointerShape(
                PointerShapeBufferSize,
                pPointerShapeBuffer,
                pPointerShapeBufferSizeRequired,
                pPointerShapeInfo
            );

            PostCall<API_IDXGIOUTPUTDUPLICATION_GETFRAMEPOINTERSHAPE>::Run(result, this, PointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->GetFramePointerShape(PointerShapeBufferSize, pPointerShapeBuffer, pPointerShapeBufferSizeRequired, pPointerShapeInfo);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutputDuplication_Wrapper::MapDesktopSurface(DXGI_MAPPED_RECT* pLockedRect)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_MAPDESKTOPSURFACE>::Run(result, this, pLockedRect);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->MapDesktopSurface(
                pLockedRect
            );

            PostCall<API_IDXGIOUTPUTDUPLICATION_MAPDESKTOPSURFACE>::Run(result, this, pLockedRect);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->MapDesktopSurface(pLockedRect);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutputDuplication_Wrapper::UnMapDesktopSurface()
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_UNMAPDESKTOPSURFACE>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->UnMapDesktopSurface();

            PostCall<API_IDXGIOUTPUTDUPLICATION_UNMAPDESKTOPSURFACE>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->UnMapDesktopSurface();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutputDuplication_Wrapper::ReleaseFrame()
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUTDUPLICATION_RELEASEFRAME>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->ReleaseFrame();

            PostCall<API_IDXGIOUTPUTDUPLICATION_RELEASEFRAME>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutputDuplication>()->ReleaseFrame();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISurface2_Wrapper::GetResource(REFIID riid, void** ppParentResource, UINT* pSubresourceIndex)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISURFACE2_GETRESOURCE>::Run(result, this, riid, ppParentResource, pSubresourceIndex);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISurface2>()->GetResource(
                riid,
                ppParentResource,
                pSubresourceIndex
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppParentResource);
            }

            PostCall<API_IDXGISURFACE2_GETRESOURCE>::Run(result, this, riid, ppParentResource, pSubresourceIndex);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISurface2>()->GetResource(riid, ppParentResource, pSubresourceIndex);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIResource1_Wrapper::CreateSubresourceSurface(UINT index, IDXGISurface2** ppSurface)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIRESOURCE1_CREATESUBRESOURCESURFACE>::Run(result, this, index, ppSurface);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIResource1>()->CreateSubresourceSurface(
                index,
                ppSurface
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGISurface2, reinterpret_cast<void**>(ppSurface));
            }

            PostCall<API_IDXGIRESOURCE1_CREATESUBRESOURCESURFACE>::Run(result, this, index, ppSurface);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIResource1>()->CreateSubresourceSurface(index, ppSurface);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIResource1_Wrapper::CreateSharedHandle(const SECURITY_ATTRIBUTES* pAttributes, DWORD dwAccess, LPCWSTR lpName, HANDLE* pHandle)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIRESOURCE1_CREATESHAREDHANDLE>::Run(result, this, pAttributes, dwAccess, lpName, pHandle);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIResource1>()->CreateSharedHandle(
                pAttributes,
                dwAccess,
                lpName,
                pHandle
            );

            PostCall<API_IDXGIRESOURCE1_CREATESHAREDHANDLE>::Run(result, this, pAttributes, dwAccess, lpName, pHandle);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIResource1>()->CreateSharedHandle(pAttributes, dwAccess, lpName, pHandle);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice2_Wrapper::OfferResources(UINT NumResources, IDXGIResource* const* ppResources, DXGI_OFFER_RESOURCE_PRIORITY Priority)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE2_OFFERRESOURCES>::Run(result, this, NumResources, ppResources, Priority);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            auto& memoryPool = Context::GetInstance().GetMemoryPool();
            result = GetWrappedObjectAs<IDXGIDevice2>()->OfferResources(
                NumResources,
                UnwrapObjects<IDXGIResource>(ppResources, NumResources, memoryPool),
                Priority
            );

            PostCall<API_IDXGIDEVICE2_OFFERRESOURCES>::Run(result, this, NumResources, ppResources, Priority);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice2>()->OfferResources(NumResources, ppResources, Priority);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice2_Wrapper::ReclaimResources(UINT NumResources, IDXGIResource* const* ppResources, BOOL* pDiscarded)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE2_RECLAIMRESOURCES>::Run(result, this, NumResources, ppResources, pDiscarded);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            auto& memoryPool = Context::GetInstance().GetMemoryPool();
            result = GetWrappedObjectAs<IDXGIDevice2>()->ReclaimResources(
                NumResources,
                UnwrapObjects<IDXGIResource>(ppResources, NumResources, memoryPool),
                pDiscarded
            );

            PostCall<API_IDXGIDEVICE2_RECLAIMRESOURCES>::Run(result, this, NumResources, ppResources, pDiscarded);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice2>()->ReclaimResources(NumResources, ppResources, pDiscarded);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice2_Wrapper::EnqueueSetEvent(HANDLE hEvent)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE2_ENQUEUESETEVENT>::Run(result, this, hEvent);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDevice2>()->EnqueueSetEvent(
                hEvent
            );

            PostCall<API_IDXGIDEVICE2_ENQUEUESETEVENT>::Run(result, this, hEvent);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice2>()->EnqueueSetEvent(hEvent);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetDesc1(DXGI_SWAP_CHAIN_DESC1* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETDESC1>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetDesc1(
                pDesc
            );

            PostCall<API_IDXGISWAPCHAIN1_GETDESC1>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetDesc1(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetFullscreenDesc(DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETFULLSCREENDESC>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetFullscreenDesc(
                pDesc
            );

            PostCall<API_IDXGISWAPCHAIN1_GETFULLSCREENDESC>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetFullscreenDesc(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetHwnd(HWND* pHwnd)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETHWND>::Run(result, this, pHwnd);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetHwnd(
                pHwnd
            );

            PostCall<API_IDXGISWAPCHAIN1_GETHWND>::Run(result, this, pHwnd);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetHwnd(pHwnd);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetCoreWindow(REFIID refiid, void** ppUnk)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETCOREWINDOW>::Run(result, this, refiid, ppUnk);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetCoreWindow(
                refiid,
                ppUnk
            );
            if (SUCCEEDED(result))
            {
                WrapObject(refiid, ppUnk);
            }

            PostCall<API_IDXGISWAPCHAIN1_GETCOREWINDOW>::Run(result, this, refiid, ppUnk);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetCoreWindow(refiid, ppUnk);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::Present1(UINT SyncInterval, UINT PresentFlags, const DXGI_PRESENT_PARAMETERS* pPresentParameters)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_PRESENT1>::Run(result, this, SyncInterval, PresentFlags, pPresentParameters);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->Present1(
                SyncInterval,
                PresentFlags,
                pPresentParameters
            );

            PostCall<API_IDXGISWAPCHAIN1_PRESENT1>::Run(result, this, SyncInterval, PresentFlags, pPresentParameters);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->Present1(SyncInterval, PresentFlags, pPresentParameters);
        }
        ctx.DecrementCallScope();
        return result;
    }

    BOOL IDXGISwapChain1_Wrapper::IsTemporaryMonoSupported()
    {
        BOOL result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_ISTEMPORARYMONOSUPPORTED>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->IsTemporaryMonoSupported();

            PostCall<API_IDXGISWAPCHAIN1_ISTEMPORARYMONOSUPPORTED>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->IsTemporaryMonoSupported();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetRestrictToOutput(IDXGIOutput** ppRestrictToOutput)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETRESTRICTTOOUTPUT>::Run(result, this, ppRestrictToOutput);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetRestrictToOutput(
                ppRestrictToOutput
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIOutput, reinterpret_cast<void**>(ppRestrictToOutput));
            }

            PostCall<API_IDXGISWAPCHAIN1_GETRESTRICTTOOUTPUT>::Run(result, this, ppRestrictToOutput);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetRestrictToOutput(ppRestrictToOutput);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::SetBackgroundColor(const DXGI_RGBA* pColor)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_SETBACKGROUNDCOLOR>::Run(result, this, pColor);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->SetBackgroundColor(
                pColor
            );

            PostCall<API_IDXGISWAPCHAIN1_SETBACKGROUNDCOLOR>::Run(result, this, pColor);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->SetBackgroundColor(pColor);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetBackgroundColor(DXGI_RGBA* pColor)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETBACKGROUNDCOLOR>::Run(result, this, pColor);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetBackgroundColor(
                pColor
            );

            PostCall<API_IDXGISWAPCHAIN1_GETBACKGROUNDCOLOR>::Run(result, this, pColor);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetBackgroundColor(pColor);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::SetRotation(DXGI_MODE_ROTATION Rotation)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_SETROTATION>::Run(result, this, Rotation);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->SetRotation(
                Rotation
            );

            PostCall<API_IDXGISWAPCHAIN1_SETROTATION>::Run(result, this, Rotation);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->SetRotation(Rotation);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain1_Wrapper::GetRotation(DXGI_MODE_ROTATION* pRotation)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN1_GETROTATION>::Run(result, this, pRotation);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetRotation(
                pRotation
            );

            PostCall<API_IDXGISWAPCHAIN1_GETROTATION>::Run(result, this, pRotation);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain1>()->GetRotation(pRotation);
        }
        ctx.DecrementCallScope();
        return result;
    }

    BOOL IDXGIFactory2_Wrapper::IsWindowedStereoEnabled()
    {
        BOOL result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_ISWINDOWEDSTEREOENABLED>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->IsWindowedStereoEnabled();

            PostCall<API_IDXGIFACTORY2_ISWINDOWEDSTEREOENABLED>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->IsWindowedStereoEnabled();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory2_Wrapper::CreateSwapChainForHwnd(IUnknown* pDevice, HWND hWnd, const DXGI_SWAP_CHAIN_DESC1* pDesc, const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_CREATESWAPCHAINFORHWND>::Run(result, this, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->CreateSwapChainForHwnd(
                UnwrapObject<IUnknown>(pDevice),
                hWnd,
                pDesc,
                pFullscreenDesc,
                UnwrapObject<IDXGIOutput>(pRestrictToOutput),
                ppSwapChain
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGISwapChain1, reinterpret_cast<void**>(ppSwapChain));
            }

            PostCall<API_IDXGIFACTORY2_CREATESWAPCHAINFORHWND>::Run(result, this, pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->CreateSwapChainForHwnd(pDevice, hWnd, pDesc, pFullscreenDesc, pRestrictToOutput, ppSwapChain);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory2_Wrapper::CreateSwapChainForCoreWindow(IUnknown* pDevice, IUnknown* pWindow, const DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_CREATESWAPCHAINFORCOREWINDOW>::Run(result, this, pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->CreateSwapChainForCoreWindow(
                UnwrapObject<IUnknown>(pDevice),
                UnwrapObject<IUnknown>(pWindow),
                pDesc,
                UnwrapObject<IDXGIOutput>(pRestrictToOutput),
                ppSwapChain
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGISwapChain1, reinterpret_cast<void**>(ppSwapChain));
            }

            PostCall<API_IDXGIFACTORY2_CREATESWAPCHAINFORCOREWINDOW>::Run(result, this, pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->CreateSwapChainForCoreWindow(pDevice, pWindow, pDesc, pRestrictToOutput, ppSwapChain);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory2_Wrapper::GetSharedResourceAdapterLuid(HANDLE hResource, LUID* pLuid)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_GETSHAREDRESOURCEADAPTERLUID>::Run(result, this, hResource, pLuid);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->GetSharedResourceAdapterLuid(
                hResource,
                pLuid
            );

            PostCall<API_IDXGIFACTORY2_GETSHAREDRESOURCEADAPTERLUID>::Run(result, this, hResource, pLuid);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->GetSharedResourceAdapterLuid(hResource, pLuid);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory2_Wrapper::RegisterStereoStatusWindow(HWND WindowHandle, UINT wMsg, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_REGISTERSTEREOSTATUSWINDOW>::Run(result, this, WindowHandle, wMsg, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterStereoStatusWindow(
                WindowHandle,
                wMsg,
                pdwCookie
            );

            PostCall<API_IDXGIFACTORY2_REGISTERSTEREOSTATUSWINDOW>::Run(result, this, WindowHandle, wMsg, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterStereoStatusWindow(WindowHandle, wMsg, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory2_Wrapper::RegisterStereoStatusEvent(HANDLE hEvent, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_REGISTERSTEREOSTATUSEVENT>::Run(result, this, hEvent, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterStereoStatusEvent(
                hEvent,
                pdwCookie
            );

            PostCall<API_IDXGIFACTORY2_REGISTERSTEREOSTATUSEVENT>::Run(result, this, hEvent, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterStereoStatusEvent(hEvent, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIFactory2_Wrapper::UnregisterStereoStatus(DWORD dwCookie)
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_UNREGISTERSTEREOSTATUS>::Run(this, dwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIFactory2>()->UnregisterStereoStatus(
                dwCookie
            );
        
            PostCall<API_IDXGIFACTORY2_UNREGISTERSTEREOSTATUS>::Run(this, dwCookie);
        }
        else
        {
            GetWrappedObjectAs<IDXGIFactory2>()->UnregisterStereoStatus(dwCookie);
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGIFactory2_Wrapper::RegisterOcclusionStatusWindow(HWND WindowHandle, UINT wMsg, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_REGISTEROCCLUSIONSTATUSWINDOW>::Run(result, this, WindowHandle, wMsg, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterOcclusionStatusWindow(
                WindowHandle,
                wMsg,
                pdwCookie
            );

            PostCall<API_IDXGIFACTORY2_REGISTEROCCLUSIONSTATUSWINDOW>::Run(result, this, WindowHandle, wMsg, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterOcclusionStatusWindow(WindowHandle, wMsg, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory2_Wrapper::RegisterOcclusionStatusEvent(HANDLE hEvent, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_REGISTEROCCLUSIONSTATUSEVENT>::Run(result, this, hEvent, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterOcclusionStatusEvent(
                hEvent,
                pdwCookie
            );

            PostCall<API_IDXGIFACTORY2_REGISTEROCCLUSIONSTATUSEVENT>::Run(result, this, hEvent, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->RegisterOcclusionStatusEvent(hEvent, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIFactory2_Wrapper::UnregisterOcclusionStatus(DWORD dwCookie)
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_UNREGISTEROCCLUSIONSTATUS>::Run(this, dwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIFactory2>()->UnregisterOcclusionStatus(
                dwCookie
            );
        
            PostCall<API_IDXGIFACTORY2_UNREGISTEROCCLUSIONSTATUS>::Run(this, dwCookie);
        }
        else
        {
            GetWrappedObjectAs<IDXGIFactory2>()->UnregisterOcclusionStatus(dwCookie);
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGIFactory2_Wrapper::CreateSwapChainForComposition(IUnknown* pDevice, const DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY2_CREATESWAPCHAINFORCOMPOSITION>::Run(result, this, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory2>()->CreateSwapChainForComposition(
                UnwrapObject<IUnknown>(pDevice),
                pDesc,
                UnwrapObject<IDXGIOutput>(pRestrictToOutput),
                ppSwapChain
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGISwapChain1, reinterpret_cast<void**>(ppSwapChain));
            }

            PostCall<API_IDXGIFACTORY2_CREATESWAPCHAINFORCOMPOSITION>::Run(result, this, pDevice, pDesc, pRestrictToOutput, ppSwapChain);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory2>()->CreateSwapChainForComposition(pDevice, pDesc, pRestrictToOutput, ppSwapChain);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter2_Wrapper::GetDesc2(DXGI_ADAPTER_DESC2* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER2_GETDESC2>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter2>()->GetDesc2(
                pDesc
            );

            PostCall<API_IDXGIADAPTER2_GETDESC2>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter2>()->GetDesc2(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput1_Wrapper::GetDisplayModeList1(DXGI_FORMAT EnumFormat, UINT Flags, UINT* pNumModes, DXGI_MODE_DESC1* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT1_GETDISPLAYMODELIST1>::Run(result, this, EnumFormat, Flags, pNumModes, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput1>()->GetDisplayModeList1(
                EnumFormat,
                Flags,
                pNumModes,
                pDesc
            );

            PostCall<API_IDXGIOUTPUT1_GETDISPLAYMODELIST1>::Run(result, this, EnumFormat, Flags, pNumModes, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput1>()->GetDisplayModeList1(EnumFormat, Flags, pNumModes, pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput1_Wrapper::FindClosestMatchingMode1(const DXGI_MODE_DESC1* pModeToMatch, DXGI_MODE_DESC1* pClosestMatch, IUnknown* pConcernedDevice)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT1_FINDCLOSESTMATCHINGMODE1>::Run(result, this, pModeToMatch, pClosestMatch, pConcernedDevice);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput1>()->FindClosestMatchingMode1(
                pModeToMatch,
                pClosestMatch,
                UnwrapObject<IUnknown>(pConcernedDevice)
            );

            PostCall<API_IDXGIOUTPUT1_FINDCLOSESTMATCHINGMODE1>::Run(result, this, pModeToMatch, pClosestMatch, pConcernedDevice);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput1>()->FindClosestMatchingMode1(pModeToMatch, pClosestMatch, pConcernedDevice);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput1_Wrapper::GetDisplaySurfaceData1(IDXGIResource* pDestination)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT1_GETDISPLAYSURFACEDATA1>::Run(result, this, pDestination);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput1>()->GetDisplaySurfaceData1(
                UnwrapObject<IDXGIResource>(pDestination)
            );

            PostCall<API_IDXGIOUTPUT1_GETDISPLAYSURFACEDATA1>::Run(result, this, pDestination);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput1>()->GetDisplaySurfaceData1(pDestination);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput1_Wrapper::DuplicateOutput(IUnknown* pDevice, IDXGIOutputDuplication** ppOutputDuplication)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT1_DUPLICATEOUTPUT>::Run(result, this, pDevice, ppOutputDuplication);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput1>()->DuplicateOutput(
                UnwrapObject<IUnknown>(pDevice),
                ppOutputDuplication
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIOutputDuplication, reinterpret_cast<void**>(ppOutputDuplication));
            }

            PostCall<API_IDXGIOUTPUT1_DUPLICATEOUTPUT>::Run(result, this, pDevice, ppOutputDuplication);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput1>()->DuplicateOutput(pDevice, ppOutputDuplication);
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIDevice3_Wrapper::Trim()
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE3_TRIM>::Run(this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIDevice3>()->Trim();
        
            PostCall<API_IDXGIDEVICE3_TRIM>::Run(this);
        }
        else
        {
            GetWrappedObjectAs<IDXGIDevice3>()->Trim();
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGISwapChain2_Wrapper::SetSourceSize(UINT Width, UINT Height)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_SETSOURCESIZE>::Run(result, this, Width, Height);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->SetSourceSize(
                Width,
                Height
            );

            PostCall<API_IDXGISWAPCHAIN2_SETSOURCESIZE>::Run(result, this, Width, Height);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->SetSourceSize(Width, Height);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain2_Wrapper::GetSourceSize(UINT* pWidth, UINT* pHeight)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_GETSOURCESIZE>::Run(result, this, pWidth, pHeight);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetSourceSize(
                pWidth,
                pHeight
            );

            PostCall<API_IDXGISWAPCHAIN2_GETSOURCESIZE>::Run(result, this, pWidth, pHeight);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetSourceSize(pWidth, pHeight);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain2_Wrapper::SetMaximumFrameLatency(UINT MaxLatency)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_SETMAXIMUMFRAMELATENCY>::Run(result, this, MaxLatency);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->SetMaximumFrameLatency(
                MaxLatency
            );

            PostCall<API_IDXGISWAPCHAIN2_SETMAXIMUMFRAMELATENCY>::Run(result, this, MaxLatency);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->SetMaximumFrameLatency(MaxLatency);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain2_Wrapper::GetMaximumFrameLatency(UINT* pMaxLatency)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_GETMAXIMUMFRAMELATENCY>::Run(result, this, pMaxLatency);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetMaximumFrameLatency(
                pMaxLatency
            );

            PostCall<API_IDXGISWAPCHAIN2_GETMAXIMUMFRAMELATENCY>::Run(result, this, pMaxLatency);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetMaximumFrameLatency(pMaxLatency);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HANDLE IDXGISwapChain2_Wrapper::GetFrameLatencyWaitableObject()
    {
        HANDLE result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_GETFRAMELATENCYWAITABLEOBJECT>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetFrameLatencyWaitableObject();

            PostCall<API_IDXGISWAPCHAIN2_GETFRAMELATENCYWAITABLEOBJECT>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetFrameLatencyWaitableObject();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain2_Wrapper::SetMatrixTransform(const DXGI_MATRIX_3X2_F* pMatrix)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_SETMATRIXTRANSFORM>::Run(result, this, pMatrix);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->SetMatrixTransform(
                pMatrix
            );

            PostCall<API_IDXGISWAPCHAIN2_SETMATRIXTRANSFORM>::Run(result, this, pMatrix);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->SetMatrixTransform(pMatrix);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain2_Wrapper::GetMatrixTransform(DXGI_MATRIX_3X2_F* pMatrix)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN2_GETMATRIXTRANSFORM>::Run(result, this, pMatrix);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetMatrixTransform(
                pMatrix
            );

            PostCall<API_IDXGISWAPCHAIN2_GETMATRIXTRANSFORM>::Run(result, this, pMatrix);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain2>()->GetMatrixTransform(pMatrix);
        }
        ctx.DecrementCallScope();
        return result;
    }

    BOOL IDXGIOutput2_Wrapper::SupportsOverlays()
    {
        BOOL result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT2_SUPPORTSOVERLAYS>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput2>()->SupportsOverlays();

            PostCall<API_IDXGIOUTPUT2_SUPPORTSOVERLAYS>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput2>()->SupportsOverlays();
        }
        ctx.DecrementCallScope();
        return result;
    }

    UINT IDXGIFactory3_Wrapper::GetCreationFlags()
    {
        UINT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY3_GETCREATIONFLAGS>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory3>()->GetCreationFlags();

            PostCall<API_IDXGIFACTORY3_GETCREATIONFLAGS>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory3>()->GetCreationFlags();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::PresentBuffer(UINT BufferToPresent, UINT SyncInterval, UINT Flags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_PRESENTBUFFER>::Run(result, this, BufferToPresent, SyncInterval, Flags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->PresentBuffer(
                BufferToPresent,
                SyncInterval,
                Flags
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_PRESENTBUFFER>::Run(result, this, BufferToPresent, SyncInterval, Flags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->PresentBuffer(BufferToPresent, SyncInterval, Flags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::SetSourceRect(const RECT* pRect)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_SETSOURCERECT>::Run(result, this, pRect);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetSourceRect(
                pRect
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_SETSOURCERECT>::Run(result, this, pRect);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetSourceRect(pRect);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::SetTargetRect(const RECT* pRect)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_SETTARGETRECT>::Run(result, this, pRect);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetTargetRect(
                pRect
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_SETTARGETRECT>::Run(result, this, pRect);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetTargetRect(pRect);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::SetDestSize(UINT Width, UINT Height)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_SETDESTSIZE>::Run(result, this, Width, Height);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetDestSize(
                Width,
                Height
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_SETDESTSIZE>::Run(result, this, Width, Height);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetDestSize(Width, Height);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::GetSourceRect(RECT* pRect)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_GETSOURCERECT>::Run(result, this, pRect);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetSourceRect(
                pRect
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_GETSOURCERECT>::Run(result, this, pRect);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetSourceRect(pRect);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::GetTargetRect(RECT* pRect)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_GETTARGETRECT>::Run(result, this, pRect);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetTargetRect(
                pRect
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_GETTARGETRECT>::Run(result, this, pRect);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetTargetRect(pRect);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::GetDestSize(UINT* pWidth, UINT* pHeight)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_GETDESTSIZE>::Run(result, this, pWidth, pHeight);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetDestSize(
                pWidth,
                pHeight
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_GETDESTSIZE>::Run(result, this, pWidth, pHeight);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetDestSize(pWidth, pHeight);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDecodeSwapChain_Wrapper::SetColorSpace(DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_SETCOLORSPACE>::Run(result, this, ColorSpace);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetColorSpace(
                ColorSpace
            );

            PostCall<API_IDXGIDECODESWAPCHAIN_SETCOLORSPACE>::Run(result, this, ColorSpace);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->SetColorSpace(ColorSpace);
        }
        ctx.DecrementCallScope();
        return result;
    }

    DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain_Wrapper::GetColorSpace()
    {
        DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDECODESWAPCHAIN_GETCOLORSPACE>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetColorSpace();

            PostCall<API_IDXGIDECODESWAPCHAIN_GETCOLORSPACE>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDecodeSwapChain>()->GetColorSpace();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactoryMedia_Wrapper::CreateSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, HANDLE hSurface, const DXGI_SWAP_CHAIN_DESC1* pDesc, IDXGIOutput* pRestrictToOutput, IDXGISwapChain1** ppSwapChain)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORYMEDIA_CREATESWAPCHAINFORCOMPOSITIONSURFACEHANDLE>::Run(result, this, pDevice, hSurface, pDesc, pRestrictToOutput, ppSwapChain);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactoryMedia>()->CreateSwapChainForCompositionSurfaceHandle(
                UnwrapObject<IUnknown>(pDevice),
                hSurface,
                pDesc,
                UnwrapObject<IDXGIOutput>(pRestrictToOutput),
                ppSwapChain
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGISwapChain1, reinterpret_cast<void**>(ppSwapChain));
            }

            PostCall<API_IDXGIFACTORYMEDIA_CREATESWAPCHAINFORCOMPOSITIONSURFACEHANDLE>::Run(result, this, pDevice, hSurface, pDesc, pRestrictToOutput, ppSwapChain);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactoryMedia>()->CreateSwapChainForCompositionSurfaceHandle(pDevice, hSurface, pDesc, pRestrictToOutput, ppSwapChain);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactoryMedia_Wrapper::CreateDecodeSwapChainForCompositionSurfaceHandle(IUnknown* pDevice, HANDLE hSurface, DXGI_DECODE_SWAP_CHAIN_DESC* pDesc, IDXGIResource* pYuvDecodeBuffers, IDXGIOutput* pRestrictToOutput, IDXGIDecodeSwapChain** ppSwapChain)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORYMEDIA_CREATEDECODESWAPCHAINFORCOMPOSITIONSURFACEHANDLE>::Run(result, this, pDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactoryMedia>()->CreateDecodeSwapChainForCompositionSurfaceHandle(
                UnwrapObject<IUnknown>(pDevice),
                hSurface,
                pDesc,
                UnwrapObject<IDXGIResource>(pYuvDecodeBuffers),
                UnwrapObject<IDXGIOutput>(pRestrictToOutput),
                ppSwapChain
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIDecodeSwapChain, reinterpret_cast<void**>(ppSwapChain));
            }

            PostCall<API_IDXGIFACTORYMEDIA_CREATEDECODESWAPCHAINFORCOMPOSITIONSURFACEHANDLE>::Run(result, this, pDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactoryMedia>()->CreateDecodeSwapChainForCompositionSurfaceHandle(pDevice, hSurface, pDesc, pYuvDecodeBuffers, pRestrictToOutput, ppSwapChain);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChainMedia_Wrapper::GetFrameStatisticsMedia(DXGI_FRAME_STATISTICS_MEDIA* pStats)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAINMEDIA_GETFRAMESTATISTICSMEDIA>::Run(result, this, pStats);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChainMedia>()->GetFrameStatisticsMedia(
                pStats
            );

            PostCall<API_IDXGISWAPCHAINMEDIA_GETFRAMESTATISTICSMEDIA>::Run(result, this, pStats);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChainMedia>()->GetFrameStatisticsMedia(pStats);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChainMedia_Wrapper::SetPresentDuration(UINT Duration)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAINMEDIA_SETPRESENTDURATION>::Run(result, this, Duration);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChainMedia>()->SetPresentDuration(
                Duration
            );

            PostCall<API_IDXGISWAPCHAINMEDIA_SETPRESENTDURATION>::Run(result, this, Duration);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChainMedia>()->SetPresentDuration(Duration);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChainMedia_Wrapper::CheckPresentDurationSupport(UINT DesiredPresentDuration, UINT* pClosestSmallerPresentDuration, UINT* pClosestLargerPresentDuration)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAINMEDIA_CHECKPRESENTDURATIONSUPPORT>::Run(result, this, DesiredPresentDuration, pClosestSmallerPresentDuration, pClosestLargerPresentDuration);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChainMedia>()->CheckPresentDurationSupport(
                DesiredPresentDuration,
                pClosestSmallerPresentDuration,
                pClosestLargerPresentDuration
            );

            PostCall<API_IDXGISWAPCHAINMEDIA_CHECKPRESENTDURATIONSUPPORT>::Run(result, this, DesiredPresentDuration, pClosestSmallerPresentDuration, pClosestLargerPresentDuration);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChainMedia>()->CheckPresentDurationSupport(DesiredPresentDuration, pClosestSmallerPresentDuration, pClosestLargerPresentDuration);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput3_Wrapper::CheckOverlaySupport(DXGI_FORMAT EnumFormat, IUnknown* pConcernedDevice, UINT* pFlags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT3_CHECKOVERLAYSUPPORT>::Run(result, this, EnumFormat, pConcernedDevice, pFlags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput3>()->CheckOverlaySupport(
                EnumFormat,
                UnwrapObject<IUnknown>(pConcernedDevice),
                pFlags
            );

            PostCall<API_IDXGIOUTPUT3_CHECKOVERLAYSUPPORT>::Run(result, this, EnumFormat, pConcernedDevice, pFlags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput3>()->CheckOverlaySupport(EnumFormat, pConcernedDevice, pFlags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    UINT IDXGISwapChain3_Wrapper::GetCurrentBackBufferIndex()
    {
        UINT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN3_GETCURRENTBACKBUFFERINDEX>::Run(result, this);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain3>()->GetCurrentBackBufferIndex();

            PostCall<API_IDXGISWAPCHAIN3_GETCURRENTBACKBUFFERINDEX>::Run(result, this);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain3>()->GetCurrentBackBufferIndex();
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain3_Wrapper::CheckColorSpaceSupport(DXGI_COLOR_SPACE_TYPE ColorSpace, UINT* pColorSpaceSupport)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN3_CHECKCOLORSPACESUPPORT>::Run(result, this, ColorSpace, pColorSpaceSupport);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain3>()->CheckColorSpaceSupport(
                ColorSpace,
                pColorSpaceSupport
            );

            PostCall<API_IDXGISWAPCHAIN3_CHECKCOLORSPACESUPPORT>::Run(result, this, ColorSpace, pColorSpaceSupport);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain3>()->CheckColorSpaceSupport(ColorSpace, pColorSpaceSupport);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain3_Wrapper::SetColorSpace1(DXGI_COLOR_SPACE_TYPE ColorSpace)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN3_SETCOLORSPACE1>::Run(result, this, ColorSpace);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain3>()->SetColorSpace1(
                ColorSpace
            );

            PostCall<API_IDXGISWAPCHAIN3_SETCOLORSPACE1>::Run(result, this, ColorSpace);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain3>()->SetColorSpace1(ColorSpace);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain3_Wrapper::ResizeBuffers1(UINT BufferCount, UINT Width, UINT Height, DXGI_FORMAT Format, UINT SwapChainFlags, const UINT* pCreationNodeMask, IUnknown* const* ppPresentQueue)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN3_RESIZEBUFFERS1>::Run(result, this, BufferCount, Width, Height, Format, SwapChainFlags, pCreationNodeMask, ppPresentQueue);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            auto& memoryPool = Context::GetInstance().GetMemoryPool();
            result = GetWrappedObjectAs<IDXGISwapChain3>()->ResizeBuffers1(
                BufferCount,
                Width,
                Height,
                Format,
                SwapChainFlags,
                pCreationNodeMask,
                UnwrapObjects<IUnknown>(ppPresentQueue, BufferCount, memoryPool)
            );

            PostCall<API_IDXGISWAPCHAIN3_RESIZEBUFFERS1>::Run(result, this, BufferCount, Width, Height, Format, SwapChainFlags, pCreationNodeMask, ppPresentQueue);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain3>()->ResizeBuffers1(BufferCount, Width, Height, Format, SwapChainFlags, pCreationNodeMask, ppPresentQueue);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput4_Wrapper::CheckOverlayColorSpaceSupport(DXGI_FORMAT Format, DXGI_COLOR_SPACE_TYPE ColorSpace, IUnknown* pConcernedDevice, UINT* pFlags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT4_CHECKOVERLAYCOLORSPACESUPPORT>::Run(result, this, Format, ColorSpace, pConcernedDevice, pFlags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput4>()->CheckOverlayColorSpaceSupport(
                Format,
                ColorSpace,
                UnwrapObject<IUnknown>(pConcernedDevice),
                pFlags
            );

            PostCall<API_IDXGIOUTPUT4_CHECKOVERLAYCOLORSPACESUPPORT>::Run(result, this, Format, ColorSpace, pConcernedDevice, pFlags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput4>()->CheckOverlayColorSpaceSupport(Format, ColorSpace, pConcernedDevice, pFlags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory4_Wrapper::EnumAdapterByLuid(LUID AdapterLuid, REFIID riid, void** ppvAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY4_ENUMADAPTERBYLUID>::Run(result, this, AdapterLuid, riid, ppvAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory4>()->EnumAdapterByLuid(
                AdapterLuid,
                riid,
                ppvAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppvAdapter);
            }

            PostCall<API_IDXGIFACTORY4_ENUMADAPTERBYLUID>::Run(result, this, AdapterLuid, riid, ppvAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory4>()->EnumAdapterByLuid(AdapterLuid, riid, ppvAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory4_Wrapper::EnumWarpAdapter(REFIID riid, void** ppvAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY4_ENUMWARPADAPTER>::Run(result, this, riid, ppvAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory4>()->EnumWarpAdapter(
                riid,
                ppvAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppvAdapter);
            }

            PostCall<API_IDXGIFACTORY4_ENUMWARPADAPTER>::Run(result, this, riid, ppvAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory4>()->EnumWarpAdapter(riid, ppvAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter3_Wrapper::RegisterHardwareContentProtectionTeardownStatusEvent(HANDLE hEvent, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER3_REGISTERHARDWARECONTENTPROTECTIONTEARDOWNSTATUSEVENT>::Run(result, this, hEvent, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter3>()->RegisterHardwareContentProtectionTeardownStatusEvent(
                hEvent,
                pdwCookie
            );

            PostCall<API_IDXGIADAPTER3_REGISTERHARDWARECONTENTPROTECTIONTEARDOWNSTATUSEVENT>::Run(result, this, hEvent, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter3>()->RegisterHardwareContentProtectionTeardownStatusEvent(hEvent, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIAdapter3_Wrapper::UnregisterHardwareContentProtectionTeardownStatus(DWORD dwCookie)
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER3_UNREGISTERHARDWARECONTENTPROTECTIONTEARDOWNSTATUS>::Run(this, dwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIAdapter3>()->UnregisterHardwareContentProtectionTeardownStatus(
                dwCookie
            );
        
            PostCall<API_IDXGIADAPTER3_UNREGISTERHARDWARECONTENTPROTECTIONTEARDOWNSTATUS>::Run(this, dwCookie);
        }
        else
        {
            GetWrappedObjectAs<IDXGIAdapter3>()->UnregisterHardwareContentProtectionTeardownStatus(dwCookie);
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGIAdapter3_Wrapper::QueryVideoMemoryInfo(UINT NodeIndex, DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup, DXGI_QUERY_VIDEO_MEMORY_INFO* pVideoMemoryInfo)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER3_QUERYVIDEOMEMORYINFO>::Run(result, this, NodeIndex, MemorySegmentGroup, pVideoMemoryInfo);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter3>()->QueryVideoMemoryInfo(
                NodeIndex,
                MemorySegmentGroup,
                pVideoMemoryInfo
            );

            PostCall<API_IDXGIADAPTER3_QUERYVIDEOMEMORYINFO>::Run(result, this, NodeIndex, MemorySegmentGroup, pVideoMemoryInfo);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter3>()->QueryVideoMemoryInfo(NodeIndex, MemorySegmentGroup, pVideoMemoryInfo);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter3_Wrapper::SetVideoMemoryReservation(UINT NodeIndex, DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup, UINT64 Reservation)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER3_SETVIDEOMEMORYRESERVATION>::Run(result, this, NodeIndex, MemorySegmentGroup, Reservation);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter3>()->SetVideoMemoryReservation(
                NodeIndex,
                MemorySegmentGroup,
                Reservation
            );

            PostCall<API_IDXGIADAPTER3_SETVIDEOMEMORYRESERVATION>::Run(result, this, NodeIndex, MemorySegmentGroup, Reservation);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter3>()->SetVideoMemoryReservation(NodeIndex, MemorySegmentGroup, Reservation);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter3_Wrapper::RegisterVideoMemoryBudgetChangeNotificationEvent(HANDLE hEvent, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER3_REGISTERVIDEOMEMORYBUDGETCHANGENOTIFICATIONEVENT>::Run(result, this, hEvent, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter3>()->RegisterVideoMemoryBudgetChangeNotificationEvent(
                hEvent,
                pdwCookie
            );

            PostCall<API_IDXGIADAPTER3_REGISTERVIDEOMEMORYBUDGETCHANGENOTIFICATIONEVENT>::Run(result, this, hEvent, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter3>()->RegisterVideoMemoryBudgetChangeNotificationEvent(hEvent, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    void IDXGIAdapter3_Wrapper::UnregisterVideoMemoryBudgetChangeNotification(DWORD dwCookie)
    {
     
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER3_UNREGISTERVIDEOMEMORYBUDGETCHANGENOTIFICATION>::Run(this, dwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return;
            }
            
            GetWrappedObjectAs<IDXGIAdapter3>()->UnregisterVideoMemoryBudgetChangeNotification(
                dwCookie
            );
        
            PostCall<API_IDXGIADAPTER3_UNREGISTERVIDEOMEMORYBUDGETCHANGENOTIFICATION>::Run(this, dwCookie);
        }
        else
        {
            GetWrappedObjectAs<IDXGIAdapter3>()->UnregisterVideoMemoryBudgetChangeNotification(dwCookie);
        }
        ctx.DecrementCallScope();
    }

    HRESULT IDXGIOutput5_Wrapper::DuplicateOutput1(IUnknown* pDevice, UINT Flags, UINT SupportedFormatsCount, const DXGI_FORMAT* pSupportedFormats, IDXGIOutputDuplication** ppOutputDuplication)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT5_DUPLICATEOUTPUT1>::Run(result, this, pDevice, Flags, SupportedFormatsCount, pSupportedFormats, ppOutputDuplication);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput5>()->DuplicateOutput1(
                UnwrapObject<IUnknown>(pDevice),
                Flags,
                SupportedFormatsCount,
                pSupportedFormats,
                ppOutputDuplication
            );
            if (SUCCEEDED(result))
            {
                WrapObject(IID_IDXGIOutputDuplication, reinterpret_cast<void**>(ppOutputDuplication));
            }

            PostCall<API_IDXGIOUTPUT5_DUPLICATEOUTPUT1>::Run(result, this, pDevice, Flags, SupportedFormatsCount, pSupportedFormats, ppOutputDuplication);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput5>()->DuplicateOutput1(pDevice, Flags, SupportedFormatsCount, pSupportedFormats, ppOutputDuplication);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGISwapChain4_Wrapper::SetHDRMetaData(DXGI_HDR_METADATA_TYPE Type, UINT Size, void* pMetaData)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGISWAPCHAIN4_SETHDRMETADATA>::Run(result, this, Type, Size, pMetaData);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGISwapChain4>()->SetHDRMetaData(
                Type,
                Size,
                pMetaData
            );

            PostCall<API_IDXGISWAPCHAIN4_SETHDRMETADATA>::Run(result, this, Type, Size, pMetaData);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGISwapChain4>()->SetHDRMetaData(Type, Size, pMetaData);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice4_Wrapper::OfferResources1(UINT NumResources, IDXGIResource* const* ppResources, DXGI_OFFER_RESOURCE_PRIORITY Priority, UINT Flags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE4_OFFERRESOURCES1>::Run(result, this, NumResources, ppResources, Priority, Flags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            auto& memoryPool = Context::GetInstance().GetMemoryPool();
            result = GetWrappedObjectAs<IDXGIDevice4>()->OfferResources1(
                NumResources,
                UnwrapObjects<IDXGIResource>(ppResources, NumResources, memoryPool),
                Priority,
                Flags
            );

            PostCall<API_IDXGIDEVICE4_OFFERRESOURCES1>::Run(result, this, NumResources, ppResources, Priority, Flags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice4>()->OfferResources1(NumResources, ppResources, Priority, Flags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIDevice4_Wrapper::ReclaimResources1(UINT NumResources, IDXGIResource* const* ppResources, DXGI_RECLAIM_RESOURCE_RESULTS* pResults)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIDEVICE4_RECLAIMRESOURCES1>::Run(result, this, NumResources, ppResources, pResults);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            auto& memoryPool = Context::GetInstance().GetMemoryPool();
            result = GetWrappedObjectAs<IDXGIDevice4>()->ReclaimResources1(
                NumResources,
                UnwrapObjects<IDXGIResource>(ppResources, NumResources, memoryPool),
                pResults
            );

            PostCall<API_IDXGIDEVICE4_RECLAIMRESOURCES1>::Run(result, this, NumResources, ppResources, pResults);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIDevice4>()->ReclaimResources1(NumResources, ppResources, pResults);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory5_Wrapper::CheckFeatureSupport(DXGI_FEATURE Feature, void* pFeatureSupportData, UINT FeatureSupportDataSize)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY5_CHECKFEATURESUPPORT>::Run(result, this, Feature, pFeatureSupportData, FeatureSupportDataSize);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory5>()->CheckFeatureSupport(
                Feature,
                pFeatureSupportData,
                FeatureSupportDataSize
            );

            PostCall<API_IDXGIFACTORY5_CHECKFEATURESUPPORT>::Run(result, this, Feature, pFeatureSupportData, FeatureSupportDataSize);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory5>()->CheckFeatureSupport(Feature, pFeatureSupportData, FeatureSupportDataSize);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIAdapter4_Wrapper::GetDesc3(DXGI_ADAPTER_DESC3* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIADAPTER4_GETDESC3>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIAdapter4>()->GetDesc3(
                pDesc
            );

            PostCall<API_IDXGIADAPTER4_GETDESC3>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIAdapter4>()->GetDesc3(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput6_Wrapper::GetDesc1(DXGI_OUTPUT_DESC1* pDesc)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT6_GETDESC1>::Run(result, this, pDesc);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput6>()->GetDesc1(
                pDesc
            );

            PostCall<API_IDXGIOUTPUT6_GETDESC1>::Run(result, this, pDesc);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput6>()->GetDesc1(pDesc);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIOutput6_Wrapper::CheckHardwareCompositionSupport(UINT* pFlags)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIOUTPUT6_CHECKHARDWARECOMPOSITIONSUPPORT>::Run(result, this, pFlags);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIOutput6>()->CheckHardwareCompositionSupport(
                pFlags
            );

            PostCall<API_IDXGIOUTPUT6_CHECKHARDWARECOMPOSITIONSUPPORT>::Run(result, this, pFlags);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIOutput6>()->CheckHardwareCompositionSupport(pFlags);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory6_Wrapper::EnumAdapterByGpuPreference(UINT Adapter, DXGI_GPU_PREFERENCE GpuPreference, REFIID riid, void** ppvAdapter)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY6_ENUMADAPTERBYGPUPREFERENCE>::Run(result, this, Adapter, GpuPreference, riid, ppvAdapter);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory6>()->EnumAdapterByGpuPreference(
                Adapter,
                GpuPreference,
                riid,
                ppvAdapter
            );
            if (SUCCEEDED(result))
            {
                WrapObject(riid, ppvAdapter);
            }

            PostCall<API_IDXGIFACTORY6_ENUMADAPTERBYGPUPREFERENCE>::Run(result, this, Adapter, GpuPreference, riid, ppvAdapter);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory6>()->EnumAdapterByGpuPreference(Adapter, GpuPreference, riid, ppvAdapter);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory7_Wrapper::RegisterAdaptersChangedEvent(HANDLE hEvent, DWORD* pdwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY7_REGISTERADAPTERSCHANGEDEVENT>::Run(result, this, hEvent, pdwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory7>()->RegisterAdaptersChangedEvent(
                hEvent,
                pdwCookie
            );

            PostCall<API_IDXGIFACTORY7_REGISTERADAPTERSCHANGEDEVENT>::Run(result, this, hEvent, pdwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory7>()->RegisterAdaptersChangedEvent(hEvent, pdwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }

    HRESULT IDXGIFactory7_Wrapper::UnregisterAdaptersChangedEvent(DWORD dwCookie)
    {
        HRESULT result = {};
        auto& ctx = Context::GetInstance();
        auto  callScope = ctx.IncrementCallScope();
        if (callScope == 1)
        {
            bool skipCall = PreCall<API_IDXGIFACTORY7_UNREGISTERADAPTERSCHANGEDEVENT>::Run(result, this, dwCookie);
            if (skipCall)
            {
                ctx.DecrementCallScope();
                return result;
            }
            
            result = GetWrappedObjectAs<IDXGIFactory7>()->UnregisterAdaptersChangedEvent(
                dwCookie
            );

            PostCall<API_IDXGIFACTORY7_UNREGISTERADAPTERSCHANGEDEVENT>::Run(result, this, dwCookie);
        }
        else
        {
            result = GetWrappedObjectAs<IDXGIFactory7>()->UnregisterAdaptersChangedEvent(dwCookie);
        }
        ctx.DecrementCallScope();
        return result;
    }


} // GfxLayer
